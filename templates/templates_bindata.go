// Code generated by go-bindata.
// sources:
// templates/cloud-config.tmpl
// templates/render.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCloudConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x61\x8b\x1b\x37\x10\xfd\xee\x5f\x31\x38\x81\xfb\x92\xf5\xba\xc9\x41\xda\x85\xa5\xb8\xc4\xd0\x83\x36\x2c\x76\x8e\x12\x4a\x39\x64\xed\xac\x57\x9c\x56\xda\x48\x23\x37\x5b\xd7\xff\xbd\x23\xad\xcf\xbe\x9a\x2b\x0e\xc5\x5f\xbc\xa3\x37\x6f\xde\x8c\xde\xe8\x95\xd4\x36\xd4\x99\xb4\xa6\x51\xdb\xc9\x44\x5a\x87\xd6\x17\x13\x00\x24\x59\xbf\x8d\x7f\x00\x5e\xc1\x16\x0d\x3a\x41\x08\x02\x0c\xfe\x09\x64\x1f\xd1\x40\x63\x1d\xa0\x90\x2d\x04\xa3\xbe\x04\x04\xa9\x83\x27\x74\xd0\x38\xdb\x41\x4b\xd4\xfb\x22\xcf\x6b\xe5\xa5\xdd\xa1\x1b\x66\x91\x70\xa6\x6c\xce\x04\x3f\x7a\xf5\x17\x96\xef\x12\xf9\x09\x50\xc0\x7e\xff\x25\x58\x2e\x32\xfb\xf0\x14\xbb\x77\xfa\x70\x38\x6a\xe8\x82\x26\x95\x39\xdc\x2a\x6b\x40\x98\xfa\x18\x48\xfa\xa1\xc6\x5e\xdb\xa1\x43\x43\x9e\x15\x62\xcd\x12\x21\x78\x84\xd7\x7d\xd8\x68\x25\x1f\x54\xbf\xbb\x4d\x3c\xa2\x66\x5e\x52\x1e\x39\x51\x31\x3c\x0b\x4e\xfb\x02\xa6\x51\x2f\xcb\xdd\xef\x67\x95\x53\x3b\x6e\xf5\xae\xda\xdd\x1e\x0e\xc5\xdb\x77\xef\x7f\x98\xa6\x4c\x65\x14\x29\xa1\xb3\x33\x43\x8f\xe8\xae\xe7\x7f\x3f\x9f\x1e\x3b\xd0\x8a\xe7\x63\x80\xe5\x6f\x2c\xb5\x40\x2d\x82\x6d\x1a\x25\x99\x15\x7a\xeb\x58\x7a\x6c\x2b\x86\x35\x6e\x85\x1c\xc6\xe0\x53\xf2\xb3\x10\x48\xc1\x1c\x9c\xdd\x29\x22\x6e\x56\x35\x30\xd8\xe0\x40\xf4\x3d\x37\x2b\x28\x4e\xa8\xb6\xe8\xcd\x0d\xc5\xc9\x20\xb3\x72\x84\x89\xbb\x44\x36\xea\x78\x79\x00\xf3\x59\xfa\xa5\xbe\xdf\x5c\xc4\x6e\xe7\xf3\xef\xa6\xcf\x19\xbe\x75\x00\x6f\xfe\xeb\xf0\xfd\x91\xb1\xd1\x88\x34\x9a\x6d\xbc\xb0\x4c\xf5\x05\x5f\xde\x08\x4e\xb7\x97\x86\xc0\x57\x5a\x27\xdf\xa5\x04\x49\x1a\xbc\x6f\x41\xda\xae\xe3\xc9\xa5\xf4\x0e\x49\xd4\x82\x04\x2b\x1a\xad\x52\x72\xd1\x55\xfa\x77\x38\xc4\x52\xa1\xe7\x63\x2c\x20\xa1\x1d\x6e\xac\xa5\xcc\x53\x34\xf7\x96\x2d\x38\x8d\x2e\xcd\xb4\x95\x8f\x09\xcb\x57\xee\x47\x59\x19\x18\xd1\x71\x5a\x5a\x8b\x99\x47\xb7\x53\x12\xd3\x09\x3c\xd5\x2f\xc0\x93\x70\xf4\x2f\x78\xd2\xf9\xed\xf0\x41\xb8\xfa\x3a\x9a\x97\xd3\x88\x8d\x66\x3c\xb9\x70\xc6\x19\xbe\x12\x2a\xe0\xef\x63\x00\xe0\xf7\x7b\xd6\xff\xc7\xe9\x73\xd1\xf0\x76\x96\x35\xf7\x86\xee\xa2\x08\x63\xd7\x63\xe0\x0c\xff\x34\xf4\x58\x5a\x83\xbe\xb5\x74\x0a\x2e\xcd\x4e\x39\x6b\xe2\xa2\x95\x9f\x17\xab\x0f\x0f\xd5\x62\xbd\xae\x7e\x5e\x2d\xd6\xcb\xf2\xb4\xbe\x9f\xb9\x8b\x4a\x78\xdf\xb7\x4e\x78\x3c\x2e\xf0\x65\xf6\xfa\xd3\xfd\xc7\x8f\xcb\x5f\x1e\xaa\xe5\xaf\x2f\x92\xac\x29\x18\x83\xba\xc2\xee\x65\xaa\xaf\x28\xd7\x71\x22\x95\xc3\x32\xdf\x28\x93\xb3\x11\x32\x09\x37\xdd\x63\xad\x1c\x64\x3d\xe4\xad\xed\x30\x8f\x0f\x5a\x3c\xbe\xb9\x9e\x99\x07\xef\xd2\xf7\x38\x22\x76\xa2\xd6\xfc\x26\xa5\x76\xee\x3a\xb1\xe5\xf2\xff\x83\xc5\x05\x03\x59\xe6\x3a\xc8\x76\x17\x92\xf2\x22\xaf\xd1\x93\x32\x69\x61\x73\xc8\x10\x9e\x0d\xe2\xf5\xfe\x62\xbe\x87\xeb\x5a\xca\xdc\xf6\x14\xa9\xcf\x75\xa2\xa3\xc0\x23\x85\x1e\x4e\xf8\x15\x76\x42\x99\x64\x87\xe5\x57\x45\xe5\x80\xfe\xec\x83\x3b\xc3\x46\xd3\xfa\xec\x83\xdf\x04\x1b\xab\xfe\x69\x28\xc7\xf7\x96\x57\xd0\xcd\xb8\xd8\x16\x69\x32\xf9\x27\x00\x00\xff\xff\xb3\x06\xd9\xce\x3e\x06\x00\x00")

func templatesCloudConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCloudConfigTmpl,
		"templates/cloud-config.tmpl",
	)
}

func templatesCloudConfigTmpl() (*asset, error) {
	bytes, err := templatesCloudConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cloud-config.tmpl", size: 1598, mode: os.FileMode(436), modTime: time.Unix(1443606500, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templatesRenderGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xbb\x6e\xdc\x30\x10\xac\xc5\xaf\xd8\xa8\xa2\x02\x85\x82\xdb\x03\x54\x38\x40\xdc\xd9\xc8\xab\x0b\x82\x80\xa7\xac\x2e\xb4\x4f\xa4\xc2\x87\x1f\x38\xdc\xbf\x67\x97\xe4\x5d\xe2\x00\x2e\x5c\x89\x3b\xb3\x9a\x9d\x1d\x72\xd5\xd3\x9d\xde\x21\x44\x5c\xd6\xbd\x8e\x18\x84\x30\xcb\xea\x7c\x04\x29\x9a\x76\xfb\x44\x48\x4b\x87\x10\xfd\xe4\xec\x3d\x1f\x23\x3e\xc6\xe1\xd4\xde\x0a\x42\x76\x26\xfe\x4a\x5b\x35\xb9\x65\xb8\x4d\xb7\x69\x40\xef\x77\xae\x15\x9d\x10\xf7\xda\xb3\xce\xa2\xc3\xdd\xa5\x7d\x82\x11\x32\xa5\xae\xa9\xbe\x4a\x76\x92\xa5\x24\xaa\xe3\xee\x99\x20\xf8\x8c\xf6\x27\x7a\x79\x1a\x70\xa3\x17\x04\x9a\x6e\xec\xae\x07\xb7\x46\xe3\x6c\x00\x63\x23\xfa\x59\x4f\x78\x38\x76\x20\x4f\x2c\x89\x39\xdf\xc1\x41\x34\x3a\x04\x8c\x19\x80\xcd\x08\x97\x5c\x3d\x13\xec\x44\x63\xe6\x4c\xbf\x19\xc1\x9a\x3d\xff\xd3\x78\x8c\xc9\x5b\x68\xdb\x1e\xaa\x5f\xb6\x47\xad\x47\xda\x71\x18\x60\xd5\x3e\xfc\xcd\x49\x34\xbc\x5b\xa4\x02\xde\x9e\x30\xf5\xf5\x4c\x66\x62\x3c\x77\xab\x1b\x7c\xf8\xdf\x01\x6f\x7b\xad\x57\x76\x78\x6e\xbb\x2a\x18\xdb\x69\x31\x4c\x7a\xc5\x76\x03\xe5\xd0\x33\xf6\x3b\xb9\xc8\x10\xd4\xfb\x50\x9f\x18\xe8\xd9\x63\x1e\x99\x05\x82\xac\xd2\x34\xe4\x47\x49\x61\xcc\x4e\xd5\x47\x5e\xa1\xe6\x25\x73\x48\xdd\x6b\xa3\xe0\x24\x1e\xbc\x89\x08\xb3\xd9\x53\x1c\x0e\xb6\x69\x9e\xd1\xbf\x30\xbf\x90\xbc\x63\x7e\x4a\xea\x7d\xae\x0f\xa4\xf3\x8f\xad\x0f\x8f\x38\xa5\x88\xb2\x34\x9f\xaf\xf9\xf5\xb7\x54\xc9\xa2\xa3\xbe\x94\x3d\xbb\x9e\x7f\x16\xc7\xfa\xbe\x4a\x9a\x32\xd4\x47\xd5\xd5\x2f\x8b\x07\x32\xf4\x2c\x58\xc9\x1e\xaa\x68\xf8\x76\x01\x1b\xd8\xa3\x25\xf0\xdd\xc5\x77\xd2\xfb\x13\x00\x00\xff\xff\x63\xfc\x35\x14\x3b\x03\x00\x00")

func templatesRenderGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesRenderGo,
		"templates/render.go",
	)
}

func templatesRenderGo() (*asset, error) {
	bytes, err := templatesRenderGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/render.go", size: 827, mode: os.FileMode(436), modTime: time.Unix(1443606809, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cloud-config.tmpl": templatesCloudConfigTmpl,
	"templates/render.go": templatesRenderGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cloud-config.tmpl": &bintree{templatesCloudConfigTmpl, map[string]*bintree{
		}},
		"render.go": &bintree{templatesRenderGo, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

